/**
 * generated by Xtext 2.24.0
 */
package ishikawa.formatting2;

import com.google.inject.Inject;
import ishikawa.services.IshikawaGrammarAccess;
import ishikawa_model.Category;
import ishikawa_model.Cause;
import ishikawa_model.Effect;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class IshikawaFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private IshikawaGrammarAccess _ishikawaGrammarAccess;
  
  protected void _format(final Effect effect, @Extension final IFormattableDocument document) {
    EList<Category> _categories = effect.getCategories();
    for (final Category category : _categories) {
      document.<Category>format(category);
    }
  }
  
  protected void _format(final Category category, @Extension final IFormattableDocument document) {
    EList<Cause> _causes = category.getCauses();
    for (final Cause cause : _causes) {
      document.<Cause>format(cause);
    }
  }
  
  public void format(final Object category, final IFormattableDocument document) {
    if (category instanceof XtextResource) {
      _format((XtextResource)category, document);
      return;
    } else if (category instanceof Category) {
      _format((Category)category, document);
      return;
    } else if (category instanceof Effect) {
      _format((Effect)category, document);
      return;
    } else if (category instanceof EObject) {
      _format((EObject)category, document);
      return;
    } else if (category == null) {
      _format((Void)null, document);
      return;
    } else if (category != null) {
      _format(category, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(category, document).toString());
    }
  }
}
