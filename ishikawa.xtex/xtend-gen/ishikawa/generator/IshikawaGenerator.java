/**
 * generated by Xtext 2.24.0
 */
package ishikawa.generator;

import com.google.common.collect.Iterables;
import ishikawa_model.Category;
import ishikawa_model.Cause;
import ishikawa_model.Effect;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IshikawaGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Effect model = ((Effect) _head);
    final EList<EObject> iter = resource.getContents();
    String _replaceAll = model.getName().replaceAll(" ", "");
    String _plus = (_replaceAll + ".xml");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<effect>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<name>");
    String _name = model.getName();
    _builder.append(_name, "\t");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    {
      EList<Category> _categories = model.getCategories();
      for(final Category category : _categories) {
        _builder.append("\t");
        _builder.append("<category>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("<name>");
        String _name_1 = category.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("</name>");
        _builder.newLineIfNotEmpty();
        {
          String _description = category.getDescription();
          boolean _tripleNotEquals = (_description != null);
          if (_tripleNotEquals) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<description>");
            String _description_1 = category.getDescription();
            _builder.append(_description_1, "\t\t");
            _builder.append("</description>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals = iter.equals(Cause.class);
          if (_equals) {
          }
        }
        {
          EList<Cause> _causes = category.getCauses();
          for(final Cause cause : _causes) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<cause>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<name>");
            String _name_2 = cause.getName();
            _builder.append(_name_2, "\t\t\t");
            _builder.append("</name>");
            _builder.newLineIfNotEmpty();
            {
              String _description_2 = cause.getDescription();
              boolean _tripleNotEquals_1 = (_description_2 != null);
              if (_tripleNotEquals_1) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<description>");
                String _description_3 = cause.getDescription();
                _builder.append(_description_3, "\t\t\t");
                _builder.append("</description>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _valueOfInterest = cause.getValueOfInterest();
              boolean _tripleNotEquals_2 = (_valueOfInterest != null);
              if (_tripleNotEquals_2) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<value>");
                String _valueOfInterest_1 = cause.getValueOfInterest();
                _builder.append(_valueOfInterest_1, "\t\t\t");
                _builder.append("</value>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Iterable<Cause> _filter = Iterables.<Cause>filter(IteratorExtensions.<EObject>toIterable(cause.eAllContents()), Cause.class);
              for(final Cause subcause : _filter) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<subcause>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<name>");
                String _name_3 = subcause.getName();
                _builder.append(_name_3, "\t\t\t\t");
                _builder.append("</name>");
                _builder.newLineIfNotEmpty();
                {
                  String _description_4 = subcause.getDescription();
                  boolean _tripleNotEquals_3 = (_description_4 != null);
                  if (_tripleNotEquals_3) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<description>");
                    String _description_5 = subcause.getDescription();
                    _builder.append(_description_5, "\t\t\t");
                    _builder.append("</description>");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  String _valueOfInterest_2 = subcause.getValueOfInterest();
                  boolean _tripleNotEquals_4 = (_valueOfInterest_2 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<value>");
                    String _valueOfInterest_3 = subcause.getValueOfInterest();
                    _builder.append(_valueOfInterest_3, "\t\t\t");
                    _builder.append("</value>");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</subcause>");
                _builder.newLine();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("</cause>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("</category>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</effect>");
    _builder.newLine();
    fsa.generateFile(_plus, _builder);
  }
}
