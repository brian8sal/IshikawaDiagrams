/**
 */
package dataoriented_ishikawa_model.provider;

import dataoriented_ishikawa_model.util.Dataoriented_ishikawa_modelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Dataoriented_ishikawa_modelItemProviderAdapterFactory extends Dataoriented_ishikawa_modelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Dataoriented_ishikawa_modelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.Effect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EffectItemProvider effectItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.Effect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEffectAdapter() {
		if (effectItemProvider == null) {
			effectItemProvider = new EffectItemProvider(this);
		}

		return effectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.Category} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryItemProvider categoryItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.Category}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryAdapter() {
		if (categoryItemProvider == null) {
			categoryItemProvider = new CategoryItemProvider(this);
		}

		return categoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.CompoundCause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompoundCauseItemProvider compoundCauseItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.CompoundCause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompoundCauseAdapter() {
		if (compoundCauseItemProvider == null) {
			compoundCauseItemProvider = new CompoundCauseItemProvider(this);
		}

		return compoundCauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.DataLinkedCause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataLinkedCauseItemProvider dataLinkedCauseItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.DataLinkedCause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataLinkedCauseAdapter() {
		if (dataLinkedCauseItemProvider == null) {
			dataLinkedCauseItemProvider = new DataLinkedCauseItemProvider(this);
		}

		return dataLinkedCauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.NotMappedCause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotMappedCauseItemProvider notMappedCauseItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.NotMappedCause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotMappedCauseAdapter() {
		if (notMappedCauseItemProvider == null) {
			notMappedCauseItemProvider = new NotMappedCauseItemProvider(this);
		}

		return notMappedCauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.AttributeFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeFilterItemProvider attributeFilterItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.AttributeFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeFilterAdapter() {
		if (attributeFilterItemProvider == null) {
			attributeFilterItemProvider = new AttributeFilterItemProvider(this);
		}

		return attributeFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.IncludedReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludedReferenceItemProvider includedReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.IncludedReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludedReferenceAdapter() {
		if (includedReferenceItemProvider == null) {
			includedReferenceItemProvider = new IncludedReferenceItemProvider(this);
		}

		return includedReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.DOF} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DOFItemProvider dofItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.DOF}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDOFAdapter() {
		if (dofItemProvider == null) {
			dofItemProvider = new DOFItemProvider(this);
		}

		return dofItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dataoriented_ishikawa_model.DataFeeder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFeederItemProvider dataFeederItemProvider;

	/**
	 * This creates an adapter for a {@link dataoriented_ishikawa_model.DataFeeder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFeederAdapter() {
		if (dataFeederItemProvider == null) {
			dataFeederItemProvider = new DataFeederItemProvider(this);
		}

		return dataFeederItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (effectItemProvider != null) effectItemProvider.dispose();
		if (categoryItemProvider != null) categoryItemProvider.dispose();
		if (compoundCauseItemProvider != null) compoundCauseItemProvider.dispose();
		if (dataLinkedCauseItemProvider != null) dataLinkedCauseItemProvider.dispose();
		if (notMappedCauseItemProvider != null) notMappedCauseItemProvider.dispose();
		if (attributeFilterItemProvider != null) attributeFilterItemProvider.dispose();
		if (includedReferenceItemProvider != null) includedReferenceItemProvider.dispose();
		if (dofItemProvider != null) dofItemProvider.dispose();
		if (dataFeederItemProvider != null) dataFeederItemProvider.dispose();
	}

}
